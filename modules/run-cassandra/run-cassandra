#!/bin/bash

set -e

readonly AZURE_INSTANCE_METADATA_URL="http://169.254.169.254/metadata/instance?api-version=2017-08-01"

function print_usage() {
  echo
  echo "Usage: run-cassandra [OPTIONS]"
  echo
  echo "This script is used to configure and run Cassandra on an Azure server."
  echo
  echo "Options:"
  echo
  echo -e "  --seeds\\tThis variable is the comma-separated list of IP addresses used by gossip for bootstrapping new nodes joining a cluster. Required."
  echo -e "  --listen\\tThis variable is for controlling which IP address to listen for incoming connections on. If not specified will attempt to default to the Azure instance IP."
  echo
  echo "Example:"
  echo
  echo "  run-cassandra --seeds CASSANDRA_SEEDS --listen CASSANDRA_LISTEN_ADDRESS"
}

function log() {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp
  timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo >&2 -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info() {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn() {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error() {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty() {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function lookup_path_in_instance_metadata() {
  local readonly path="$1"
  curl --silent --show-error --header Metadata:true --location "$AZURE_INSTANCE_METADATA_URL" | jq -r "$path"
}

function get_instance_ip_address() {
  lookup_path_in_instance_metadata ".network.interface[0].ipv4.ipAddress[0].privateIpAddress"
}

function update_config() {
  local readonly seeds="$1"
  local readonly listen="$2"

  sudo sed -i "s/seeds: \"127.0.0.1\"/seeds: \"$seeds\"/g" /etc/cassandra/cassandra.yaml
  sudo sed -i "s/listen_address: localhost/listen_address: $listen/g" /etc/cassandra/cassandra.yaml
}

function wait_for_seeds() {
  local readonly seeds="$1"
  # shellcheck disable=SC2034
  local readonly listen="$2"

  IFS=',' read -ra ADDR <<<"$seeds"
  for i in "${ADDR[@]}"; do
    echo "Waiting for cassandra seeds to launch on 7000..."

    # do not wait for this instance to come online
    if [ "$i" == "$listen" ]; then
      echo "Local instance in seeds list, skipping..."
      continue
    fi

    while ! nc -z "$i" 7000; do
      sleep 0.1 # wait for 1/10 of the second before check again
    done
  done
}

function run_service() {
  sudo systemctl daemon-reload
  sudo systemctl enable cassandra
  sudo systemctl stop cassandra
  sudo systemctl start cassandra
}

function run() {
  local seeds=""
  local listen=""
  local instance_ip_address

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
    --seeds)
      seeds="$2"
      shift
      ;;
    --listen)
      listen="$2"
      shift
      ;;
    --help)
      print_usage
      exit
      ;;
    *)
      log_error "Unrecognized argument: $key"
      print_usage
      exit 1
      ;;
    esac

    shift
  done

  assert_not_empty "--seeds" "$seeds"

  instance_ip_address=$(get_instance_ip_address)

  if [[ -z "$listen" ]]; then
    listen=$instance_ip_address
  fi

  wait_for_seeds "$seeds" "$listen"

  update_config "$seeds" "$listen"

  run_service
}

run "$@"
