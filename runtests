#!/usr/bin/env bash

set -o errexit
set -o pipefail

main() {
  local force env_file

  while [[ "${1}" ]]; do
    case "${1}" in
    '--force' | '-f')
      force=1
      shift
      continue
      ;;
    '--env' | '-e')
      env_file="${2}"
      shift 2
      continue
      ;;
    '--')
      shift
      break
      ;;
    *)
      echo "Unknown option '${1}'" >&2
      exit 1
      ;;
    esac
  done

  if [[ ! "${force}" ]]; then
    __assert_no_changes
  fi

  local terraform
  terraform="$(make -f terraform-common.mk .echo-tf)"

  if [[ "${env_file}" ]]; then
    echo "Running isolated with env ${env_file}"
    local exec_opts
    if [[ "${force}" ]]; then
      exec_opts='--force'
    fi
    exec env -i \
      HOME="${HOME}" \
      PATH="${PATH}" \
      TERM="${TERM}" \
      LANG="${LANG}" \
      bash -c "source '${env_file}' && bash ${BASH_SOURCE[0]} ${exec_opts}"
  fi

  for f in $(git ls-files '*.json'); do
    echo -en "$f "
    python -m json.tool <"${f}" >/dev/null
    echo "✓"
  done

  for f in $(git ls-files '*/Makefile'); do
    echo -en "${f} "
    make -C "$(dirname "${f}")" -p >/dev/null
    echo "✓"
  done

  echo 'Running shellcheck'
  git grep -El '^#!/.+\b(bash|sh)\b' | xargs shellcheck

  echo 'Running shfmt'
  git grep -El '^#!/.+\b(bash|sh)\b' | xargs shfmt -i 2 -w

  echo 'Running bats'
  for f in $(git ls-files '*.bats'); do
    echo "${f}"
    bats -t "${f}"
  done

  for d in $(git ls-files '*.tf' | xargs -n1 dirname | LC_ALL=C sort | uniq); do
    echo -en "${d} "
    if [[ -f "${d}/Makefile" ]]; then
      terraform="$(make -f "${d}/Makefile" .echo-tf)"
    else
      terraform="$(make -f terraform-common.mk .echo-tf)"
    fi
    if [[ -f "${d}/.terraform-validate-flags" ]]; then
      # shellcheck disable=SC2046
      "${terraform}" validate $(cat "${d}/.terraform-validate-flags") "${d}"
    else
      "${terraform}" validate -check-variables=false "${d}"
    fi
    echo "✓"
  done

  echo 'Running terraform fmt'
  "${terraform}" fmt
}

__assert_no_changes() {
  # abort if there are uncommitted local changes
  if ! git diff-index --quiet HEAD --; then
    cat <<EOF
You have uncommitted changes.
Not proceeding, as this script changes some files in place.
(Use --force to override)
EOF
    exit 1
  fi
}

main "$@"
